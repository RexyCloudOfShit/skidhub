local RayfieldCustom = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Default Theme
local Theme = {
    MainColor = Color3.fromRGB(25, 25, 25),
    AccentColor = Color3.fromRGB(0, 85, 255),
    TextColor = Color3.fromRGB(255, 255, 255),
    Font = Enum.Font.Gotham,
    TweenTime = 0.25
}

-- Helper function for tweening
local function Tween(Object, Properties)
    local Tween = TweenService:Create(Object, TweenInfo.new(Theme.TweenTime), Properties)
    Tween:Play()
    return Tween
end

-- Creates a draggable window
function RayfieldCustom.CreateWindow(Title)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "RayfieldCustomUI"
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 400, 0, 300)
    MainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainFrame.BackgroundColor3 = Theme.MainColor
    MainFrame.BackgroundTransparency = 0.1
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = ScreenGui

    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 6)
    Corner.Parent = MainFrame

    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 30)
    TopBar.BackgroundColor3 = Theme.MainColor
    TopBar.BorderSizePixel = 0
    TopBar.Parent = MainFrame

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.Text = Title or "Rayfield Custom UI"
    TitleLabel.Font = Theme.Font
    TitleLabel.TextColor3 = Theme.TextColor
    TitleLabel.TextSize = 14
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Size = UDim2.new(1, -10, 1, 0)
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = TopBar

    -- Draggable window logic
    local Dragging, DragInput, DragStart, StartPos
    TopBar.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            DragStart = Input.Position
            StartPos = MainFrame.Position
            Input.Changed:Connect(function()
                if Input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)

    TopBar.InputChanged:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseMovement then
            DragInput = Input
        end
    end)

    UserInputService.InputChanged:Connect(function(Input)
        if Dragging and Input == DragInput then
            local Delta = Input.Position - DragStart
            MainFrame.Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + Delta.X, StartPos.Y.Scale, StartPos.Y.Offset + Delta.Y)
        end
    end)

    -- Container for elements
    local Container = Instance.new("Frame")
    Container.Name = "Container"
    Container.Size = UDim2.new(1, -20, 1, -40)
    Container.Position = UDim2.new(0, 10, 0, 35)
    Container.BackgroundTransparency = 1
    Container.Parent = MainFrame

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Padding = UDim.new(0, 5)
    UIListLayout.Parent = Container

    return {
        ScreenGui = ScreenGui,
        MainFrame = MainFrame,
        Container = Container,
        Theme = Theme,
    }
end

-- Creates a button
function RayfieldCustom.CreateButton(Window, Text, Callback)
    local Button = Instance.new("TextButton")
    Button.Name = "Button"
    Button.Size = UDim2.new(1, 0, 0, 35)
    Button.BackgroundColor3 = Theme.MainColor
    Button.BackgroundTransparency = 0.5
    Button.Text = Text or "Button"
    Button.Font = Theme.Font
    Button.TextColor3 = Theme.TextColor
    Button.TextSize = 14
    Button.AutoButtonColor = false
    Button.Parent = Window.Container

    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 4)
    Corner.Parent = Button

    -- Hover effect
    Button.MouseEnter:Connect(function()
        Tween(Button, { BackgroundTransparency = 0.3 })
    end)

    Button.MouseLeave:Connect(function()
        Tween(Button, { BackgroundTransparency = 0.5 })
    end)

    -- Click effect
    Button.MouseButton1Down:Connect(function()
        Tween(Button, { BackgroundColor3 = Theme.AccentColor, BackgroundTransparency = 0.2 })
    end)

    Button.MouseButton1Up:Connect(function()
        Tween(Button, { BackgroundColor3 = Theme.MainColor, BackgroundTransparency = 0.3 })
    end)

    -- Callback
    Button.MouseButton1Click:Connect(function()
        if Callback then Callback() end
    end)

    return Button
end

-- Creates a toggle
function RayfieldCustom.CreateToggle(Window, Text, Default, Callback)
    local Toggle = Instance.new("TextButton")
    Toggle.Name = "Toggle"
    Toggle.Size = UDim2.new(1, 0, 0, 30)
    Toggle.BackgroundTransparency = 1
    Toggle.Text = ""
    Toggle.AutoButtonColor = false
    Toggle.Parent = Window.Container

    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Name = "ToggleFrame"
    ToggleFrame.Size = UDim2.new(0, 40, 0, 20)
    ToggleFrame.Position = UDim2.new(1, -45, 0.5, -10)
    ToggleFrame.AnchorPoint = Vector2.new(1, 0.5)
    ToggleFrame.BackgroundColor3 = Theme.MainColor
    ToggleFrame.BackgroundTransparency = 0.5
    ToggleFrame.Parent = Toggle

    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(1, 0)
    ToggleCorner.Parent = ToggleFrame

    local ToggleDot = Instance.new("Frame")
    ToggleDot.Name = "ToggleDot"
    ToggleDot.Size = UDim2.new(0, 16, 0, 16)
    ToggleDot.Position = UDim2.new(0, 2, 0.5, -8)
    ToggleDot.AnchorPoint = Vector2.new(0, 0.5)
    ToggleDot.BackgroundColor3 = Theme.TextColor
    ToggleDot.Parent = ToggleFrame

    local ToggleCornerDot = Instance.new("UICorner")
    ToggleCornerDot.CornerRadius = UDim.new(1, 0)
    ToggleCornerDot.Parent = ToggleDot

    local ToggleLabel = Instance.new("TextLabel")
    ToggleLabel.Name = "Label"
    ToggleLabel.Text = Text or "Toggle"
    ToggleLabel.Font = Theme.Font
    ToggleLabel.TextColor3 = Theme.TextColor
    ToggleLabel.TextSize = 14
    ToggleLabel.BackgroundTransparency = 1
    ToggleLabel.Size = UDim2.new(1, -50, 1, 0)
    ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    ToggleLabel.Parent = Toggle

    local Toggled = Default or false

    local function UpdateToggle()
        if Toggled then
            Tween(ToggleDot, { Position = UDim2.new(1, -18, 0.5, -8), BackgroundColor3 = Theme.AccentColor })
            Tween(ToggleFrame, { BackgroundColor3 = Theme.AccentColor, BackgroundTransparency = 0.3 })
        else
            Tween(ToggleDot, { Position = UDim2.new(0, 2, 0.5, -8), BackgroundColor3 = Theme.TextColor })
            Tween(ToggleFrame, { BackgroundColor3 = Theme.MainColor, BackgroundTransparency = 0.5 })
        end
    end

    UpdateToggle()

    Toggle.MouseButton1Click:Connect(function()
        Toggled = not Toggled
        UpdateToggle()
        if Callback then Callback(Toggled) end
    end)

    return Toggle
end

return RayfieldCustom
